<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>BeeFE</title>
    <description>A little better from Web Front End.
</description>
    <link>http://beefe.github.io//</link>
    <atom:link href="http://beefe.github.io//feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Tue, 10 May 2016 15:46:12 +0800</pubDate>
    <lastBuildDate>Tue, 10 May 2016 15:46:12 +0800</lastBuildDate>
    <generator>Jekyll v3.1.2</generator>
    
      <item>
        <title>Jekyll Basic Usage</title>
        <description>&lt;p&gt;Jekyll是一款广受好评的静态博客系统，主要基于Ruby构建，某些功能也需要nodejs与python辅助。因为本博客系统也是基于Jekyll搭建的，就着刚学习搭建完成，写一篇博客总结一下Jekyll的具体使用。如果想要更系统地进行学习，请参考&lt;a href=&quot;https://jekyllrb.com/docs/&quot;&gt;官方文档&lt;/a&gt;&lt;/p&gt;

&lt;!-- more --&gt;

&lt;h2 id=&quot;installation-and-quik-start&quot;&gt;Installation and Quik-start&lt;/h2&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;~ &lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;gem install jekyll
~ &lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;jekyll new myblog
~ &lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;myblog
~/myblog &lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;jekyll serve
&lt;span class=&quot;c&quot;&gt;# =&amp;gt; Now browse to http://localhost:4000&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;jekyll 基于Ruby， 由 gem 安装，如果安装遇上问题搜索一下 gem 国内原，也可参考仓库的 &lt;a href=&quot;https://github.com/beefe/beefe.github.io/blob/master/README.md&quot;&gt;README 文档&lt;/a&gt;。 安装后 Jekyll 可以在命令行中调用，代码第二行便是调用 jekyll 工具新建了一个博客目录，这个目录结构可以看作是 Jekyll 使用的基本目录结构，在此基础上博客便能正常运转；进一步编辑可以在&lt;code class=&quot;highlighter-rouge&quot;&gt;_post&lt;/code&gt;目录下按照&lt;a href=&quot;https://jekyllrb.com/docs/posts/&quot;&gt;基本格式&lt;/a&gt;添加内容，亦可对网站资源进行更为深入的定制。之后在相应的目录中调用 Jekyll 的调试服务器即可，jekyll &lt;a href=&quot;https://jekyllrb.com/docs/usage/&quot;&gt;命令行api&lt;/a&gt;。&lt;/p&gt;

&lt;h2 id=&quot;site-model&quot;&gt;Site Model&lt;/h2&gt;

&lt;p&gt;作为一个只懂 H5, CSS 和 JS 的前端小白，使用 Jekyll 构建网站就必须得面对两个问题， YAML是个什么鬼 以及 全站的数据模型究竟是咋回事儿。顺道说一句，jekyll 是支持 JSON 和 CSV 的。&lt;/p&gt;

&lt;h3 id=&quot;yaml&quot;&gt;YAML&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;YAML 是一种受到多种语言(python, ruby, c# …)广泛支持的数据格式，以小白的视点看基本就是和 JSON 一个意思，讲的牛逼一点，YAML是JSON的父集。&lt;/li&gt;
  &lt;li&gt;YAML Yet Another Markup Language, which is easy to write and easy to read&lt;/li&gt;
  &lt;li&gt;YAML is structured by indentation&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;ul&gt;
  &lt;li&gt;健值对&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&quot;language-YAML&quot;&gt;key: value
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
  &lt;li&gt;基本数据结构&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&quot;language-YAML&quot;&gt;a: 123                     # an integer
b: &quot;123&quot;                   # a string, disambiguated by quotes
c: 123.0                   # a float
d: !!float 123             # also a float via explicit data type prefixed by (!!)
e: !!str 123               # a string, disambiguated by explicit type
f: !!str Yes               # a string via explicit type
g: Yes                     # a boolean True (yaml1.1), string &quot;Yes&quot; (yaml1.2)
h: Yes we have No bananas  # a string, &quot;Yes&quot; and &quot;No&quot; disambiguated by context.
picture: !!binary |        # binary data
  R0lGODdhDQAIAIAAAAAAANn
  Z2SwAAAAADQAIAAACF4SDGQ
  ar3xxbJ9p0qa7R0YxwzaFME
  1IAADs=
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
  &lt;li&gt;数组的 &lt;em&gt;行内&lt;/em&gt; 与 &lt;em&gt;缩进&lt;/em&gt; 表示&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&quot;language-YAML&quot;&gt;men: [John Smith, Bill Jones]
women:
  - Mary Smith
  - Susan Williams
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
  &lt;li&gt;多行字符串的表示&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&quot;language-YAML&quot;&gt;specialDelivery:  &amp;gt;
    Follow the Yellow Brick
    Road to the Emerald City.
street: |
        123 Tornado Alley
        Suite 16


&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
  &lt;li&gt;一个综合一点的例子&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&quot;language-YAML&quot;&gt;receipt:     Oz-Ware Purchase Invoice
date:        2012-08-06
customer:
    first_name:   Dorothy
    family_name:  Gale

items:
    - part_no:   A4786
      descrip:   Water Bucket (Filled)
      price:     1.47
      quantity:  4

    - part_no:   E1628
      descrip:   High Heeled &quot;Ruby&quot; Slippers
      size:      8
      price:     133.7
      quantity:  1

bill-to:  &amp;amp;id001
    street: |
            123 Tornado Alley
            Suite 16
    city:   East Centerville
    state:  KS

ship-to:  *id001

specialDelivery:  &amp;gt;
    Follow the Yellow Brick
    Road to the Emerald City.
    Pay no attention to the
    man behind the curtain.
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;front-matter&quot;&gt;Front Matter&lt;/h3&gt;
&lt;p&gt;Font Matter，用官网的话说 ‘The front matter is where Jekyll starts to get really cool’。当一个文件头部有一块 YAML 内容时，这块内容会被 Jekyll 处理，同时该文件本身也变成了一个特殊文件，比如说 &lt;code class=&quot;highlighter-rouge&quot;&gt;_posts&lt;/code&gt; 内的博客文件。需要注意的有两方面内容，&lt;em&gt;第一&lt;/em&gt; Front Matter 的格式规范；&lt;em&gt;第二&lt;/em&gt; 常用变量的作用与文档查询&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Front Matter 必须出现在文章头部，换言之从第一行开始就好了&lt;/li&gt;
  &lt;li&gt;Front Matter 被包裹在两行分割线内，这两道分割线必须是 [MUST] 三道杠 &lt;code class=&quot;highlighter-rouge&quot;&gt;---&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Front Matter 内定义的数据可以在文件处理过程中通过 liquid 模版利用&lt;/li&gt;
  &lt;li&gt;对于全站通用的数据，可以在 &lt;code class=&quot;highlighter-rouge&quot;&gt;_data&lt;/code&gt; 目录内定义，如作者；或是在 &lt;code class=&quot;highlighter-rouge&quot;&gt;_config.yml&lt;/code&gt; 内配置。&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&quot;language-YAML&quot;&gt;---
layout: post
title: Jekyll Basic Usage
author: xszhi
categories: tech_note
tag: Jekyll
---
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;查看变量时注意三方面内容。&lt;/p&gt;

    &lt;ol&gt;
      &lt;li&gt;目录结构有没有对应名称&lt;/li&gt;
      &lt;li&gt;相应模版中有没有调用&lt;/li&gt;
      &lt;li&gt;是否为 Jekyll 预定义&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;以下简单分析本例，, 更细致的使用见下一个章节。&lt;/p&gt;

    &lt;ol&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;layout: post&lt;/code&gt; 表示在渲染时使用 &lt;code class=&quot;highlighter-rouge&quot;&gt;_layout&lt;/code&gt; 目录下的 &lt;code class=&quot;highlighter-rouge&quot;&gt;post.html&lt;/code&gt; 模版&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;title: Jekyll Basic Usage&lt;/code&gt; 数据通过模版&lt;code class=&quot;highlighter-rouge&quot;&gt;post.html&lt;/code&gt;渲染时候的 &lt;code class=&quot;highlighter-rouge&quot;&gt;page.title&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;author: xszhi&lt;/code&gt; 渲染时的 &lt;code class=&quot;highlighter-rouge&quot;&gt;page.author&lt;/code&gt;， 同时用于调用 &lt;code class=&quot;highlighter-rouge&quot;&gt;site.data.authors.xszhi&lt;/code&gt;， 请查看文件 &lt;code class=&quot;highlighter-rouge&quot;&gt;/_data/authors&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;最后两行均是为了对文章内容进行进一步细分而设定的自定义数据&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;call-data&quot;&gt;Call Data&lt;/h3&gt;

&lt;p&gt;数据的调用需要熟悉两方面内容&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://help.shopify.com/themes/liquid/basics&quot;&gt;liquid&lt;/a&gt; 模版语法，以及 Jekyll 对 liquid 的&lt;a href=&quot;https://help.shopify.com/themes/liquid/basics&quot;&gt;扩张&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;挂载数据的&lt;a href=&quot;https://jekyllrb.com/docs/variables/&quot;&gt;关键对象&lt;/a&gt;及其api&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;下图是想说明 Jekyll 的官方文档已经很详略得当了，建议大家过一遍 Variables, Templates 以及 Configuration这三个部分(我想测下图片是否能够正常显示)，&lt;/p&gt;

    &lt;p&gt;&lt;img src=&quot;/img/2016-05-10-jekyll-tutorial/global_variables.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Liquid 要点&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;核心概念有三个 Tag, Object, Filter
    &lt;ol&gt;
      &lt;li&gt;Tag 完成流控制&lt;/li&gt;
      &lt;li&gt;Objects 用于渲染内容&lt;/li&gt;
      &lt;li&gt;Filter 用于修改，调整数据&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
&lt;span class=&quot;c&quot;&gt;&amp;lt;!-- TAG --&amp;gt;&lt;/span&gt;
{% if user.name == &#39;elvis&#39; %}
  Hey Elvis
{% endif %}

&lt;span class=&quot;c&quot;&gt;&amp;lt;!-- Objects --&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;p&amp;gt;&lt;/span&gt;{{ page.title }}&lt;span class=&quot;nt&quot;&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;&amp;lt;!-- output  --&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;p&amp;gt;&lt;/span&gt; Jekyll Basic Usage &lt;span class=&quot;nt&quot;&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;&amp;lt;!-- Filters --&amp;gt;&lt;/span&gt;
{{ &#39;sales&#39; | append: &#39;.jpg&#39; }}
&lt;span class=&quot;c&quot;&gt;&amp;lt;!-- Output: sales.jpg --&amp;gt;&lt;/span&gt;

{% end raw %}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://help.shopify.com/themes/liquid/basics/operators&quot;&gt;操作符&lt;/a&gt;只包括逻辑和比较操作符&lt;/li&gt;
  &lt;li&gt;Data Type 注意 Nil 和 EmptyDrop
    &lt;ol&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;assign&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;my_string&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;Hello World!&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;%}&lt;/span&gt;&lt;/code&gt;  给变量赋值一个 str&lt;/li&gt;
      &lt;li&gt;对于 Nil，需要注意的是，其被转换为 false&lt;/li&gt;
      &lt;li&gt;Array的遍历操作&lt;/li&gt;
      &lt;li&gt;关于真假 在 liquid 内除了 nil 和 false 其它值均为真&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
  &lt;li&gt;以下是一些简单的例子，进一步熟悉可浏览 &lt;code class=&quot;highlighter-rouge&quot;&gt;jekyll new &amp;lt;name&amp;gt;&lt;/code&gt; 生成的代码,更多内容请参考&lt;a href=&quot;https://help.shopify.com/themes/liquid/basics&quot;&gt;官方文档&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;raw&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;lt;!--&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;Nil&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;--&amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;fulfillment.tracking_numbers&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;There&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;is&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;tracking&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;number.&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;endif&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;

&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;lt;!--&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;Array&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;--&amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;tag&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;in&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;product.tags&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;tag&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;endfor&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;

&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;lt;!--&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&#39;&#39;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;and&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;--&amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;unless&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;settings.fp_heading&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;==&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;blank&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;lt;h&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;settings.fp_heading&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;}&amp;lt;/h&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;endunless&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;


&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;misc&quot;&gt;Misc&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;对于全站需要使用的配置信息可以在 &lt;code class=&quot;highlighter-rouge&quot;&gt;config.yml&lt;/code&gt; 中编辑，需要指出的是，config.yml 内容的修改并不会出发 jekyll 测试服务器的刷新。&lt;/li&gt;
  &lt;li&gt;页面的创建只是对模版渲染以及网站数据结构的综合运用。&lt;/li&gt;
  &lt;li&gt;关于样式，Jekyll 默认支持 sass。但是没有 sourcemap， 并不是特别爽，暂时还不知如何要爽由自己，有解决方式的同学，希望能够不吝赐教。&lt;/li&gt;
  &lt;li&gt;结合 Github 的发布是很容易的，个人或是组织，建立&lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;name&amp;gt;.github.io&lt;/code&gt; 仓库（代码需要储存于master分支）， 项目建立 &lt;code class=&quot;highlighter-rouge&quot;&gt;gh-page&lt;/code&gt;分支，上传代码即可。&lt;/li&gt;
  &lt;li&gt;评论功能的引入，建议使用百度的&lt;a href=&quot;http://dev.duoshuo.com/docs&quot;&gt;多说&lt;/a&gt;，简单快捷。当然 disquss 这样的库也是存在的&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;欢迎留言，转载，吐槽。&lt;/p&gt;
</description>
        <pubDate>Tue, 10 May 2016 00:00:00 +0800</pubDate>
        <link>http://beefe.github.io//tech_note/2016/05/10/Jekyll-tutorial.html</link>
        <guid isPermaLink="true">http://beefe.github.io//tech_note/2016/05/10/Jekyll-tutorial.html</guid>
        
        <category>Jekyll</category>
        
        
        <category>tech_note</category>
        
      </item>
    
      <item>
        <title>Jekyll Basic Usage</title>
        <description>&lt;p&gt;Jekyll是一款广受好评的静态博客系统，主要基于Ruby构建，某些功能也需要nodejs与python辅助。因为本博客系统也是基于Jekyll搭建的，就着刚学习搭建完成，写一篇博客总结一下Jekyll的具体使用。如果想要更系统地进行学习，请参考&lt;a href=&quot;https://jekyllrb.com/docs/&quot;&gt;官方文档&lt;/a&gt;&lt;/p&gt;

&lt;!-- more --&gt;

&lt;h2 id=&quot;installation-and-quik-start&quot;&gt;Installation and Quik-start&lt;/h2&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;~ &lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;gem install jekyll
~ &lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;jekyll new myblog
~ &lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;myblog
~/myblog &lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;jekyll serve
&lt;span class=&quot;c&quot;&gt;# =&amp;gt; Now browse to http://localhost:4000&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;jekyll 基于Ruby， 由 gem 安装，如果安装遇上问题搜索一下 gem 国内原，也可参考仓库的 &lt;a href=&quot;https://github.com/beefe/beefe.github.io/blob/master/README.md&quot;&gt;README 文档&lt;/a&gt;。 安装后 Jekyll 可以在命令行中调用，代码第二行便是调用 jekyll 工具新建了一个博客目录，这个目录结构可以看作是 Jekyll 使用的基本目录结构，在此基础上博客便能正常运转；进一步编辑可以在&lt;code class=&quot;highlighter-rouge&quot;&gt;_post&lt;/code&gt;目录下按照&lt;a href=&quot;https://jekyllrb.com/docs/posts/&quot;&gt;基本格式&lt;/a&gt;添加内容，亦可对网站资源进行更为深入的定制。之后在相应的目录中调用 Jekyll 的调试服务器即可，jekyll &lt;a href=&quot;https://jekyllrb.com/docs/usage/&quot;&gt;命令行api&lt;/a&gt;。&lt;/p&gt;

&lt;h2 id=&quot;site-model&quot;&gt;Site Model&lt;/h2&gt;

&lt;p&gt;作为一个只懂 H5, CSS 和 JS 的前端小白，使用 Jekyll 构建网站就必须得面对两个问题， YAML是个什么鬼 以及 全站的数据模型究竟是咋回事儿。顺道说一句，jekyll 是支持 JSON 和 CSV 的。撇开第一眼就看蒙逼的YAML&lt;/p&gt;

&lt;h3 id=&quot;yaml&quot;&gt;YAML&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;YAML 是一种受到多种语言(python, ruby, c# …)广泛支持的数据格式，以小白的视点看基本就是和 JSON 一个意思，讲的牛逼一点，YAML是JSON的父集。&lt;/li&gt;
  &lt;li&gt;YAML Yet Another Markup Language, which is easy to write and easy to read&lt;/li&gt;
  &lt;li&gt;YAML is structured by indentation&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;ul&gt;
  &lt;li&gt;健值对&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&quot;language-YAML&quot;&gt;key: value
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
  &lt;li&gt;基本数据结构&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&quot;language-YAML&quot;&gt;a: 123                     # an integer
b: &quot;123&quot;                   # a string, disambiguated by quotes
c: 123.0                   # a float
d: !!float 123             # also a float via explicit data type prefixed by (!!)
e: !!str 123               # a string, disambiguated by explicit type
f: !!str Yes               # a string via explicit type
g: Yes                     # a boolean True (yaml1.1), string &quot;Yes&quot; (yaml1.2)
h: Yes we have No bananas  # a string, &quot;Yes&quot; and &quot;No&quot; disambiguated by context.
picture: !!binary |        # binary data
  R0lGODdhDQAIAIAAAAAAANn
  Z2SwAAAAADQAIAAACF4SDGQ
  ar3xxbJ9p0qa7R0YxwzaFME
  1IAADs=
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
  &lt;li&gt;数组的 &lt;em&gt;行内&lt;/em&gt; 与 &lt;em&gt;缩进&lt;/em&gt; 表示&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&quot;language-YAML&quot;&gt;men: [John Smith, Bill Jones]
women:
  - Mary Smith
  - Susan Williams
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
  &lt;li&gt;多行字符串的表示&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&quot;language-YAML&quot;&gt;specialDelivery:  &amp;gt;
    Follow the Yellow Brick
    Road to the Emerald City.
street: |
        123 Tornado Alley
        Suite 16


&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
  &lt;li&gt;一个综合一点的例子&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&quot;language-YAML&quot;&gt;receipt:     Oz-Ware Purchase Invoice
date:        2012-08-06
customer:
    first_name:   Dorothy
    family_name:  Gale

items:
    - part_no:   A4786
      descrip:   Water Bucket (Filled)
      price:     1.47
      quantity:  4

    - part_no:   E1628
      descrip:   High Heeled &quot;Ruby&quot; Slippers
      size:      8
      price:     133.7
      quantity:  1

bill-to:  &amp;amp;id001
    street: |
            123 Tornado Alley
            Suite 16
    city:   East Centerville
    state:  KS

ship-to:  *id001

specialDelivery:  &amp;gt;
    Follow the Yellow Brick
    Road to the Emerald City.
    Pay no attention to the
    man behind the curtain.
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;front-matter&quot;&gt;Front Matter&lt;/h3&gt;
&lt;p&gt;Font Matter，用官网的话说 ‘The front matter is where Jekyll starts to get really cool’。当一个文件头部有一块 YAML 内容时，这块内容会被 Jekyll 处理，同时该文件本身也变成了一个特殊文件，比如说 &lt;code class=&quot;highlighter-rouge&quot;&gt;_posts&lt;/code&gt; 内的博客文件。需要注意的有两方面内容，&lt;em&gt;第一&lt;/em&gt; Front Matter 的格式规范；&lt;em&gt;第二&lt;/em&gt; 常用变量的作用与文档查询&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Front Matter 必须出现在文章头部，换言之从第一行开始就好了&lt;/li&gt;
  &lt;li&gt;Front Matter 被包裹在两行分割线内，这两道分割线必须是 [MUST] 三道杠 &lt;code class=&quot;highlighter-rouge&quot;&gt;---&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Front Matter 内定义的数据可以在文件处理过程中通过 liquid 模版利用&lt;/li&gt;
  &lt;li&gt;对于全站通用的数据，可以在 &lt;code class=&quot;highlighter-rouge&quot;&gt;_data&lt;/code&gt; 目录内定义，如作者；或是在 &lt;code class=&quot;highlighter-rouge&quot;&gt;_config.yml&lt;/code&gt; 内配置。&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&quot;language-YAML&quot;&gt;---
layout: post
title: Jekyll Basic Usage
author: xszhi
categories: tech_note
tag: Jekyll
---
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;查看变量时注意三方面内容。&lt;/p&gt;

    &lt;ol&gt;
      &lt;li&gt;目录结构有没有对应名称&lt;/li&gt;
      &lt;li&gt;相应模版中有没有调用&lt;/li&gt;
      &lt;li&gt;是否为 Jekyll 预定义&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;以下简单分析本例，, 更细致的使用见下一个章节。&lt;/p&gt;

    &lt;ol&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;layout: post&lt;/code&gt; 表示在渲染时使用 &lt;code class=&quot;highlighter-rouge&quot;&gt;_layout&lt;/code&gt; 目录下的 &lt;code class=&quot;highlighter-rouge&quot;&gt;post.html&lt;/code&gt; 模版&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;title: Jekyll Basic Usage&lt;/code&gt; 数据通过模版&lt;code class=&quot;highlighter-rouge&quot;&gt;post.html&lt;/code&gt;渲染时候的 &lt;code class=&quot;highlighter-rouge&quot;&gt;page.title&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;author: xszhi&lt;/code&gt; 渲染时的 &lt;code class=&quot;highlighter-rouge&quot;&gt;page.author&lt;/code&gt;， 同时用于调用 &lt;code class=&quot;highlighter-rouge&quot;&gt;site.data.authors.xszhi&lt;/code&gt;， 请查看文件 &lt;code class=&quot;highlighter-rouge&quot;&gt;/_data/authors&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;最后两行均是为了对文章内容进行进一步细分而设定的自定义数据&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;call-data&quot;&gt;Call Data&lt;/h3&gt;

&lt;p&gt;数据的调用需要熟悉两方面内容&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://help.shopify.com/themes/liquid/basics&quot;&gt;liquid&lt;/a&gt; 模版语法，以及 Jekyll 对 liquid 的&lt;a href=&quot;https://help.shopify.com/themes/liquid/basics&quot;&gt;扩张&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;挂载数据的&lt;a href=&quot;https://jekyllrb.com/docs/variables/&quot;&gt;关键对象&lt;/a&gt;及其api&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;下图是想说明 Jekyll 的官方文档已经很详略得当了，建议大家过一遍 Variables, Templates 以及 Configuration这三个部分(我想测下图片是否能够正常显示)，&lt;/p&gt;

    &lt;p&gt;&lt;img src=&quot;/img/2016-05-10-jekyll-tutorial/global_variables.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Liquid 要点&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;核心概念有三个 Tag, Object, Filter
    &lt;ol&gt;
      &lt;li&gt;Tag 完成流控制&lt;/li&gt;
      &lt;li&gt;Objects 用于渲染内容&lt;/li&gt;
      &lt;li&gt;Filter 用于修改，调整数据&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;&amp;lt;!-- TAG --&amp;gt;&lt;/span&gt;


&lt;span class=&quot;c&quot;&gt;&amp;lt;!-- Objects --&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;p&amp;gt;&lt;/span&gt;Jekyll Basic Usage&lt;span class=&quot;nt&quot;&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;&amp;lt;!-- output  --&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;p&amp;gt;&lt;/span&gt; Jekyll Basic Usage &lt;span class=&quot;nt&quot;&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;&amp;lt;!-- Filters --&amp;gt;&lt;/span&gt;
sales.jpg
&lt;span class=&quot;c&quot;&gt;&amp;lt;!-- Output: sales.jpg --&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://help.shopify.com/themes/liquid/basics/operators&quot;&gt;操作符&lt;/a&gt;只包括逻辑和比较操作符&lt;/li&gt;
  &lt;li&gt;Data Type 注意 Nil 和 EmptyDrop
    &lt;ol&gt;
      &lt;li&gt;``  给变量赋值一个 str&lt;/li&gt;
      &lt;li&gt;对于 Nil，需要注意的是，其被转换为 false&lt;/li&gt;
      &lt;li&gt;Array的遍历操作&lt;/li&gt;
      &lt;li&gt;关于真假 在 liquid 内除了 nil 和 false 其它值均为真&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
  &lt;li&gt;以下是一些简单的例子，进一步熟悉可浏览 &lt;code class=&quot;highlighter-rouge&quot;&gt;jekyll new &amp;lt;name&amp;gt;&lt;/code&gt; 生成的代码,更多内容请参考&lt;a href=&quot;https://help.shopify.com/themes/liquid/basics&quot;&gt;官方文档&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;&amp;lt;!-- Nil --&amp;gt;&lt;/span&gt;


&lt;span class=&quot;c&quot;&gt;&amp;lt;!-- Array --&amp;gt;&lt;/span&gt;


&lt;span class=&quot;c&quot;&gt;&amp;lt;!-- &#39;&#39; and false --&amp;gt;&lt;/span&gt;

    &lt;span class=&quot;nt&quot;&gt;&amp;lt;h1&amp;gt;&amp;lt;/h1&amp;gt;&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;misc&quot;&gt;Misc&lt;/h2&gt;

&lt;p&gt;对于全站需要使用的配置信息可以在 &lt;code class=&quot;highlighter-rouge&quot;&gt;config.yml&lt;/code&gt; 中编辑，需要指出的是，config.yml 内容的修改并不会出发 jekyll 测试服务器的刷新。
页面的创建只是对模版渲染以及网站数据结构的综合运用。
关于样式，Jekyll 默认支持 sass。但是没有 sourcemap， 并不是特别爽，暂时还不知如何要爽由自己，有解决方式的同学，希望能够不吝赐教。
结合 Github 的发布是很容易的，个人或是组织，建立&lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;name&amp;gt;.github.io&lt;/code&gt; 仓库（代码需要储存于master分支）， 项目建立 &lt;code class=&quot;highlighter-rouge&quot;&gt;gh-page&lt;/code&gt;分支，上传代码即可。&lt;/p&gt;

&lt;p&gt;欢迎留言，转载，吐槽。&lt;/p&gt;
</description>
        <pubDate>Tue, 10 May 2016 00:00:00 +0800</pubDate>
        <link>http://beefe.github.io//tech_note/2016/05/10/Jekyll-tutorial.html</link>
        <guid isPermaLink="true">http://beefe.github.io//tech_note/2016/05/10/Jekyll-tutorial.html</guid>
        
        <category>Jekyll</category>
        
        
        <category>tech_note</category>
        
      </item>
    
      <item>
        <title>React Native platform difference</title>
        <description>&lt;p&gt;test the excerpt separator
&lt;!-- more --&gt;&lt;/p&gt;

&lt;p&gt;#React Native 双平台差异及解决方法(0.20)&lt;/p&gt;

&lt;h3 id=&quot;section&quot;&gt;标签及属性差异&lt;/h3&gt;
&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;1. TextInput&lt;/strong&gt;
- iOS下的&lt;code class=&quot;highlighter-rouge&quot;&gt;textAlign&lt;/code&gt;取值 &lt;code class=&quot;highlighter-rouge&quot;&gt;auto&lt;/code&gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;left&lt;/code&gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;right&lt;/code&gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;center&lt;/code&gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;justify&lt;/code&gt;
- android下的&lt;code class=&quot;highlighter-rouge&quot;&gt;textAlign&lt;/code&gt;取值为 &lt;code class=&quot;highlighter-rouge&quot;&gt;start&lt;/code&gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;center&lt;/code&gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;end&lt;/code&gt;
安卓平台有黑色边框和选中黄框，可通过设置&lt;code class=&quot;highlighter-rouge&quot;&gt;underlineColorAndroid=&#39;rgba(0,0,0,0)&#39;&lt;/code&gt;去掉
安卓平台无清除按钮，可以使用 &lt;a href=&quot;https://github.com/beefe/react-native-textinput&quot;&gt;react-native-textinput&lt;/a&gt; 来兼容双平台&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2. Image&lt;/strong&gt;
- iOS下&lt;code class=&quot;highlighter-rouge&quot;&gt;resizeMode&lt;/code&gt;可以写在行间属性，也可以写在style，后者覆盖前者
- android下&lt;code class=&quot;highlighter-rouge&quot;&gt;resizeMode&lt;/code&gt;只可以写在行间，写在style无效
&lt;code class=&quot;highlighter-rouge&quot;&gt;javascript
    //android
    &amp;lt;Image resizeMode={&#39;stretch&#39;}&amp;gt;&amp;lt;/Image&amp;gt;
    //ios, style中的cover会覆盖掉stretch
    &amp;lt;Image resizeMode={&#39;stretch&#39;} style=resizeMode&amp;gt;&amp;lt;/Image&amp;gt;
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;3. Text&lt;/strong&gt;
- iOS下最主要的&lt;code class=&quot;highlighter-rouge&quot;&gt;padding&lt;/code&gt;、&lt;code class=&quot;highlighter-rouge&quot;&gt;lineHeight&lt;/code&gt;的 style 属性都正常支持
- android下&lt;code class=&quot;highlighter-rouge&quot;&gt;padding&lt;/code&gt;、&lt;code class=&quot;highlighter-rouge&quot;&gt;lineHeight&lt;/code&gt;无效，包括单独支持 android 的&lt;code class=&quot;highlighter-rouge&quot;&gt;textAlignVertical enum(&#39;auto&#39;, &#39;top&#39;, &#39;bottom&#39;, &#39;center&#39;)&lt;/code&gt; 也不支持，解决办法就是 &lt;code class=&quot;highlighter-rouge&quot;&gt;padding&lt;/code&gt; 改用 &lt;code class=&quot;highlighter-rouge&quot;&gt;margin&lt;/code&gt;，或 &lt;code class=&quot;highlighter-rouge&quot;&gt;padding&lt;/code&gt; 改用父节点 &lt;code class=&quot;highlighter-rouge&quot;&gt;padding&lt;/code&gt;；&lt;code class=&quot;highlighter-rouge&quot;&gt;lineHeight&lt;/code&gt; 改用 &lt;code class=&quot;highlighter-rouge&quot;&gt;marginTop&lt;/code&gt; 负值
```javascript
    //双平台&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;let isAndroid = Platform.OS === &#39;android&#39;;

let styleTextLine1 = {
    fontSize: 12,
    marginBottom: 20,
};
let styleTextLine2 = {
    fontSize: 50,
    height: 50,
    lineHeight: 50, // ios
    marginTop: isAndroid ? -15 : 0,
};

&amp;lt;View style=&amp;gt;
    &amp;lt;Text style={styleTextLine1}&amp;gt;第一行，要求与第二行有间隔 20，字体大小 12&amp;lt;/Text&amp;gt;
    &amp;lt;Text style={styleTextLine2}&amp;gt;第二行，要求字体大小 50，字体上下居中，高度 50&amp;lt;/Text&amp;gt;
&amp;lt;/View&amp;gt; ```
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;4. style &lt;code class=&quot;highlighter-rouge&quot;&gt;position: &#39;absolute&#39;&lt;/code&gt;&lt;/strong&gt;
- iOS下正常
- android下，&lt;code class=&quot;highlighter-rouge&quot;&gt;position: &#39;absolute&#39;&lt;/code&gt; 超过父节点高宽部分，会隐藏掉。解决办法：当需要用&lt;code class=&quot;highlighter-rouge&quot;&gt;position: &#39;absolute&#39;&lt;/code&gt;的时候，恰巧要求：子节点定位超出父节点高或宽，放弃使用，改用别的布局，或者将子节点放到于父节点同级，再定位。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;5. style &lt;code class=&quot;highlighter-rouge&quot;&gt;borderRadius&lt;/code&gt;&lt;/strong&gt;
- iOS下正常
- Android下，不支持类似&lt;code class=&quot;highlighter-rouge&quot;&gt;borderTopLeftRadius&lt;/code&gt;这种写法&lt;/p&gt;

&lt;h3 id=&quot;api&quot;&gt;API差异&lt;/h3&gt;
&lt;p&gt;–&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1. &lt;code class=&quot;highlighter-rouge&quot;&gt;api&lt;/code&gt; NativeMethodsMixin &lt;code class=&quot;highlighter-rouge&quot;&gt;static measure(callback: MeasureOnSuccessCallback)&lt;/code&gt;&lt;/strong&gt;
- iOS下正常
- android下，回调函数获取不到视图的尺寸 &lt;code class=&quot;highlighter-rouge&quot;&gt;x&lt;/code&gt;、&lt;code class=&quot;highlighter-rouge&quot;&gt;y&lt;/code&gt;、&lt;code class=&quot;highlighter-rouge&quot;&gt;width&lt;/code&gt;、&lt;code class=&quot;highlighter-rouge&quot;&gt;heigth&lt;/code&gt;、&lt;code class=&quot;highlighter-rouge&quot;&gt;pageX&lt;/code&gt;、&lt;code class=&quot;highlighter-rouge&quot;&gt;pageY&lt;/code&gt; 等值。可以考虑用 &lt;code class=&quot;highlighter-rouge&quot;&gt;onLayout&lt;/code&gt; 属性来代替，需要注意的是，需要计算 layout 的视图，载入之后，防止内部不必要的重绘引起的尺寸变化，基本上保证 state 改变后，视图的尺寸即可预见。&lt;/p&gt;

&lt;h3 id=&quot;section-1&quot;&gt;常见问题：&lt;/h3&gt;
&lt;p&gt;–&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1. 返回事件的处理&lt;/strong&gt;
- iOS如果使用&lt;code class=&quot;highlighter-rouge&quot;&gt;NavigatorIOS&lt;/code&gt;，并且设置了&lt;code class=&quot;highlighter-rouge&quot;&gt;navigationBarHidden={true}&lt;/code&gt;(隐藏NavigationBar)，将会导致右滑返回手势失效，解决方法：使用&lt;code class=&quot;highlighter-rouge&quot;&gt;Navigator&lt;/code&gt;代替，但需要自己设置切场动画。
- android物理返回键，需要在每个&lt;code class=&quot;highlighter-rouge&quot;&gt;Navigator&lt;/code&gt;的源头使用&lt;code class=&quot;highlighter-rouge&quot;&gt;BackAndroid&lt;/code&gt;做监听，如果&lt;code class=&quot;highlighter-rouge&quot;&gt;this.navigator.state.routeStack.length === 1&lt;/code&gt;，则可以认为当前处于根view，可以退出app。否则将navigator往回退1即可。
&lt;code class=&quot;highlighter-rouge&quot;&gt;javascript
    //android
    import React, {Navigator, BackAndroid} from &#39;react-native&#39;;
    //拓展类似于NavigatorIOS的popN
    Navigator.prototype.popN = function(n) {
        let routeStack = this.state.routeStack;
        let index = routeStack.length - n - 1;
        if (routeStack[index]) {
            this.popToRoute(routeStack[index]);
        }
    };
    class MyApp extends React.Component {
        ...
        componentDidMount(){
            BackAndroid.addEventListener(&#39;hardwareBackPress&#39;, () =&amp;gt; {
                //不在根view, 往回退1，阻止退出
                if(this._navigator.state.routeStack.length &amp;gt; 1){
                    this._navigator.popN(1);
                    return true;
                }
                //在根view，退出(或再次点击退出)
                else{
                    return false;
                }
            });
        }
        render(){
            &amp;lt;Navigator
                ref={(navigator) =&amp;gt; {
                    if(navigator !== this._navigator){
                        this._navigator = navigator;
                    }
                }}
            /&amp;gt;
        }
    }
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2. 有关屏幕的高度&lt;code class=&quot;highlighter-rouge&quot;&gt;Dimensions.get(&#39;window&#39;).height&lt;/code&gt;&lt;/strong&gt;
- 两个平台都是整个屏幕的高度(包含statusBar, 安卓端不包含虚拟按键)
- iOS平台的布局是从statusBar的顶端开始
- android平台的布局是从statusBar的底端开始(设置&lt;code class=&quot;highlighter-rouge&quot;&gt;translucent: true&lt;/code&gt;后也从statusBar顶端开始)
- 如果设置view的高度是&lt;code class=&quot;highlighter-rouge&quot;&gt;Dimensions.get(&#39;window&#39;).height&lt;/code&gt;，然后设置&lt;code class=&quot;highlighter-rouge&quot;&gt;position: &#39;absolute&#39;, top: 0&lt;/code&gt;，会发现android平台view的底端被遮住了一小部分，这一小部分正好就是android平台statusBar的高度
- 安卓端statusBar通常是25dp，虚拟按键通常是48dp
- 解决方法有四：
  - 设置view的高度是整屏的高度减去statusBar的高度
  - 设置&lt;code class=&quot;highlighter-rouge&quot;&gt;top&lt;/code&gt;值为负的statusBar的高度
  - 设置&lt;code class=&quot;highlighter-rouge&quot;&gt;bottom: -Dimensions.get(&#39;window&#39;).height&lt;/code&gt; 替代&lt;code class=&quot;highlighter-rouge&quot;&gt;top: 0&lt;/code&gt;
  - 在每一个&lt;code class=&quot;highlighter-rouge&quot;&gt;Navigator&lt;/code&gt;的入口设置&lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;StatusBar translucent={true}/&amp;gt;&lt;/code&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;b&gt;大坑:&lt;/b&gt; 有些手机通过上述方法获取到的屏幕高度竟然包含了虚拟按键的高度，如魅族pro4，只能引入&lt;a href=&quot;https://github.com/rebeccahughes/react-native-device-info&quot;&gt;react-native-device-info&lt;/a&gt;这个库来hack一下了&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;3. Android过门动画卡顿&lt;/strong&gt;
- 从测试结果来看是网络请求和过门动作同时进行导致，将网络请求延迟到过门动画结束后即可解决。深层原因？&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;4. Android启动图launcher&lt;/strong&gt;
- 修改MainActivity的父类ReactActivity，在加载RN的view的同时在该view上面覆盖一个原生的view，用来显示启动图，并且设置N秒后隐藏或等待拿到首页数据接口后隐藏&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;5. 支持程度问题&lt;/strong&gt;
- iOS支持7.0及以上
- Android支持API 16+ (Android 4.1) 因为使用了&lt;a href=&quot;http://developer.android.com/reference/android/view/Choreographer.html&quot;&gt;Choreographer&lt;/a&gt;
- 友盟2016-02数据：
  - iOS7.0 以下已不计入主流版本(1%以下)，和其他非主流版本共占4.92%
  - Android4.0 还有2.16%，其他非主流版本共占7.47%&lt;/p&gt;
</description>
        <pubDate>Fri, 06 May 2016 00:00:00 +0800</pubDate>
        <link>http://beefe.github.io//rn/components/2016/05/06/react-native-platform-difference.html</link>
        <guid isPermaLink="true">http://beefe.github.io//rn/components/2016/05/06/react-native-platform-difference.html</guid>
        
        
        <category>RN</category>
        
        <category>components</category>
        
      </item>
    
      <item>
        <title>&lt;标题&gt;</title>
        <description>&lt;p&gt;简介，这会在首页显示&lt;/p&gt;

&lt;!-- more --&gt;

&lt;p&gt;其上的部分会作为摘要显示在首页中，在&lt;code class=&quot;highlighter-rouge&quot;&gt;post&lt;/code&gt;这个layout中，摘要的所有标注和标签都会被 escape 掉。如果想要保留样式或是标签，请先找薛淞之改模版。&lt;/p&gt;

&lt;p&gt;正文（注意上面有两个空格）&lt;/p&gt;

</description>
        <pubDate>Fri, 06 May 2016 00:00:00 +0800</pubDate>
        <link>http://beefe.github.io//2016/05/06/empty.html</link>
        <guid isPermaLink="true">http://beefe.github.io//2016/05/06/empty.html</guid>
        
        
      </item>
    
  </channel>
</rss>
