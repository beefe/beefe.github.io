<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>BeeFE</title>
    <description>A little better from Web Front End.
</description>
    <link>http://beefe.github.io//</link>
    <atom:link href="http://beefe.github.io//feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Mon, 09 May 2016 17:24:29 +0800</pubDate>
    <lastBuildDate>Mon, 09 May 2016 17:24:29 +0800</lastBuildDate>
    <generator>Jekyll v3.1.2</generator>
    
      <item>
        <title>Welcome to Jekyll!</title>
        <description>&lt;p&gt;You’ll find this post in your &lt;code class=&quot;highlighter-rouge&quot;&gt;_posts&lt;/code&gt; directory. Go ahead and edit it and re-build the site to see your changes. You can rebuild the site in many different ways, but the most common way is to run &lt;code class=&quot;highlighter-rouge&quot;&gt;jekyll serve&lt;/code&gt;, which launches a web server and auto-regenerates your site when a file is updated.&lt;/p&gt;

&lt;p&gt;To add new posts, simply add a file in the &lt;code class=&quot;highlighter-rouge&quot;&gt;_posts&lt;/code&gt; directory that follows the convention &lt;code class=&quot;highlighter-rouge&quot;&gt;YYYY-MM-DD-name-of-post.ext&lt;/code&gt; and includes the necessary front matter. Take a look at the source for this post to get an idea about how it works.&lt;/p&gt;

&lt;p&gt;Jekyll also offers powerful support for code snippets:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;print_hi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Hi, &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;print_hi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;Tom&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#=&amp;gt; prints &#39;Hi, Tom&#39; to STDOUT.&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Check out the &lt;a href=&quot;http://jekyllrb.com/docs/home&quot;&gt;Jekyll docs&lt;/a&gt; for more info on how to get the most out of Jekyll. File all bugs/feature requests at &lt;a href=&quot;https://github.com/jekyll/jekyll&quot;&gt;Jekyll’s GitHub repo&lt;/a&gt;. If you have questions, you can ask them on &lt;a href=&quot;https://talk.jekyllrb.com/&quot;&gt;Jekyll Talk&lt;/a&gt;.&lt;/p&gt;

</description>
        <pubDate>Fri, 06 May 2016 11:20:45 +0800</pubDate>
        <link>http://beefe.github.io//jekyll/update/2016/05/06/welcome-to-jekyll.html</link>
        <guid isPermaLink="true">http://beefe.github.io//jekyll/update/2016/05/06/welcome-to-jekyll.html</guid>
        
        
        <category>jekyll</category>
        
        <category>update</category>
        
      </item>
    
      <item>
        <title>React Native platform difference</title>
        <description>&lt;p&gt;test the excerpt separator
&lt;!-- more --&gt;&lt;/p&gt;

&lt;p&gt;#React Native 双平台差异及解决方法(0.20)&lt;/p&gt;

&lt;h3 id=&quot;section&quot;&gt;标签及属性差异&lt;/h3&gt;
&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;1. TextInput&lt;/strong&gt;
- iOS下的&lt;code class=&quot;highlighter-rouge&quot;&gt;textAlign&lt;/code&gt;取值 &lt;code class=&quot;highlighter-rouge&quot;&gt;auto&lt;/code&gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;left&lt;/code&gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;right&lt;/code&gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;center&lt;/code&gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;justify&lt;/code&gt;
- android下的&lt;code class=&quot;highlighter-rouge&quot;&gt;textAlign&lt;/code&gt;取值为 &lt;code class=&quot;highlighter-rouge&quot;&gt;start&lt;/code&gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;center&lt;/code&gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;end&lt;/code&gt;
安卓平台有黑色边框和选中黄框，可通过设置&lt;code class=&quot;highlighter-rouge&quot;&gt;underlineColorAndroid=&#39;rgba(0,0,0,0)&#39;&lt;/code&gt;去掉
安卓平台无清除按钮，可以使用 &lt;a href=&quot;https://github.com/beefe/react-native-textinput&quot;&gt;react-native-textinput&lt;/a&gt; 来兼容双平台&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2. Image&lt;/strong&gt;
- iOS下&lt;code class=&quot;highlighter-rouge&quot;&gt;resizeMode&lt;/code&gt;可以写在行间属性，也可以写在style，后者覆盖前者
- android下&lt;code class=&quot;highlighter-rouge&quot;&gt;resizeMode&lt;/code&gt;只可以写在行间，写在style无效
&lt;code class=&quot;highlighter-rouge&quot;&gt;javascript
    //android
    &amp;lt;Image resizeMode={&#39;stretch&#39;}&amp;gt;&amp;lt;/Image&amp;gt;
    //ios, style中的cover会覆盖掉stretch
    &amp;lt;Image resizeMode={&#39;stretch&#39;} style=resizeMode&amp;gt;&amp;lt;/Image&amp;gt;
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;3. Text&lt;/strong&gt;
- iOS下最主要的&lt;code class=&quot;highlighter-rouge&quot;&gt;padding&lt;/code&gt;、&lt;code class=&quot;highlighter-rouge&quot;&gt;lineHeight&lt;/code&gt;的 style 属性都正常支持
- android下&lt;code class=&quot;highlighter-rouge&quot;&gt;padding&lt;/code&gt;、&lt;code class=&quot;highlighter-rouge&quot;&gt;lineHeight&lt;/code&gt;无效，包括单独支持 android 的&lt;code class=&quot;highlighter-rouge&quot;&gt;textAlignVertical enum(&#39;auto&#39;, &#39;top&#39;, &#39;bottom&#39;, &#39;center&#39;)&lt;/code&gt; 也不支持，解决办法就是 &lt;code class=&quot;highlighter-rouge&quot;&gt;padding&lt;/code&gt; 改用 &lt;code class=&quot;highlighter-rouge&quot;&gt;margin&lt;/code&gt;，或 &lt;code class=&quot;highlighter-rouge&quot;&gt;padding&lt;/code&gt; 改用父节点 &lt;code class=&quot;highlighter-rouge&quot;&gt;padding&lt;/code&gt;；&lt;code class=&quot;highlighter-rouge&quot;&gt;lineHeight&lt;/code&gt; 改用 &lt;code class=&quot;highlighter-rouge&quot;&gt;marginTop&lt;/code&gt; 负值
```javascript
    //双平台&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;let isAndroid = Platform.OS === &#39;android&#39;;

let styleTextLine1 = {
    fontSize: 12,
    marginBottom: 20,
};
let styleTextLine2 = {
    fontSize: 50,
    height: 50,
    lineHeight: 50, // ios
    marginTop: isAndroid ? -15 : 0,
};

&amp;lt;View style=&amp;gt;
    &amp;lt;Text style={styleTextLine1}&amp;gt;第一行，要求与第二行有间隔 20，字体大小 12&amp;lt;/Text&amp;gt;
    &amp;lt;Text style={styleTextLine2}&amp;gt;第二行，要求字体大小 50，字体上下居中，高度 50&amp;lt;/Text&amp;gt;
&amp;lt;/View&amp;gt; ```
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;4. style &lt;code class=&quot;highlighter-rouge&quot;&gt;position: &#39;absolute&#39;&lt;/code&gt;&lt;/strong&gt;
- iOS下正常
- android下，&lt;code class=&quot;highlighter-rouge&quot;&gt;position: &#39;absolute&#39;&lt;/code&gt; 超过父节点高宽部分，会隐藏掉。解决办法：当需要用&lt;code class=&quot;highlighter-rouge&quot;&gt;position: &#39;absolute&#39;&lt;/code&gt;的时候，恰巧要求：子节点定位超出父节点高或宽，放弃使用，改用别的布局，或者将子节点放到于父节点同级，再定位。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;5. style &lt;code class=&quot;highlighter-rouge&quot;&gt;borderRadius&lt;/code&gt;&lt;/strong&gt;
- iOS下正常
- Android下，不支持类似&lt;code class=&quot;highlighter-rouge&quot;&gt;borderTopLeftRadius&lt;/code&gt;这种写法&lt;/p&gt;

&lt;h3 id=&quot;api&quot;&gt;API差异&lt;/h3&gt;
&lt;p&gt;–&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1. &lt;code class=&quot;highlighter-rouge&quot;&gt;api&lt;/code&gt; NativeMethodsMixin &lt;code class=&quot;highlighter-rouge&quot;&gt;static measure(callback: MeasureOnSuccessCallback)&lt;/code&gt;&lt;/strong&gt;
- iOS下正常
- android下，回调函数获取不到视图的尺寸 &lt;code class=&quot;highlighter-rouge&quot;&gt;x&lt;/code&gt;、&lt;code class=&quot;highlighter-rouge&quot;&gt;y&lt;/code&gt;、&lt;code class=&quot;highlighter-rouge&quot;&gt;width&lt;/code&gt;、&lt;code class=&quot;highlighter-rouge&quot;&gt;heigth&lt;/code&gt;、&lt;code class=&quot;highlighter-rouge&quot;&gt;pageX&lt;/code&gt;、&lt;code class=&quot;highlighter-rouge&quot;&gt;pageY&lt;/code&gt; 等值。可以考虑用 &lt;code class=&quot;highlighter-rouge&quot;&gt;onLayout&lt;/code&gt; 属性来代替，需要注意的是，需要计算 layout 的视图，载入之后，防止内部不必要的重绘引起的尺寸变化，基本上保证 state 改变后，视图的尺寸即可预见。&lt;/p&gt;

&lt;h3 id=&quot;section-1&quot;&gt;常见问题：&lt;/h3&gt;
&lt;p&gt;–&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1. 返回事件的处理&lt;/strong&gt;
- iOS如果使用&lt;code class=&quot;highlighter-rouge&quot;&gt;NavigatorIOS&lt;/code&gt;，并且设置了&lt;code class=&quot;highlighter-rouge&quot;&gt;navigationBarHidden={true}&lt;/code&gt;(隐藏NavigationBar)，将会导致右滑返回手势失效，解决方法：使用&lt;code class=&quot;highlighter-rouge&quot;&gt;Navigator&lt;/code&gt;代替，但需要自己设置切场动画。
- android物理返回键，需要在每个&lt;code class=&quot;highlighter-rouge&quot;&gt;Navigator&lt;/code&gt;的源头使用&lt;code class=&quot;highlighter-rouge&quot;&gt;BackAndroid&lt;/code&gt;做监听，如果&lt;code class=&quot;highlighter-rouge&quot;&gt;this.navigator.state.routeStack.length === 1&lt;/code&gt;，则可以认为当前处于根view，可以退出app。否则将navigator往回退1即可。
&lt;code class=&quot;highlighter-rouge&quot;&gt;javascript
    //android
    import React, {Navigator, BackAndroid} from &#39;react-native&#39;;
    //拓展类似于NavigatorIOS的popN
    Navigator.prototype.popN = function(n) {
        let routeStack = this.state.routeStack;
        let index = routeStack.length - n - 1;
        if (routeStack[index]) {
            this.popToRoute(routeStack[index]);
        }
    };
    class MyApp extends React.Component {
        ...
        componentDidMount(){
            BackAndroid.addEventListener(&#39;hardwareBackPress&#39;, () =&amp;gt; {
                //不在根view, 往回退1，阻止退出
                if(this._navigator.state.routeStack.length &amp;gt; 1){
                    this._navigator.popN(1);
                    return true;
                }
                //在根view，退出(或再次点击退出)
                else{
                    return false;
                }
            });
        }
        render(){
            &amp;lt;Navigator
                ref={(navigator) =&amp;gt; {
                    if(navigator !== this._navigator){
                        this._navigator = navigator;
                    }
                }}
            /&amp;gt;
        }
    }
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2. 有关屏幕的高度&lt;code class=&quot;highlighter-rouge&quot;&gt;Dimensions.get(&#39;window&#39;).height&lt;/code&gt;&lt;/strong&gt;
- 两个平台都是整个屏幕的高度(包含statusBar, 安卓端不包含虚拟按键)
- iOS平台的布局是从statusBar的顶端开始
- android平台的布局是从statusBar的底端开始(设置&lt;code class=&quot;highlighter-rouge&quot;&gt;translucent: true&lt;/code&gt;后也从statusBar顶端开始)
- 如果设置view的高度是&lt;code class=&quot;highlighter-rouge&quot;&gt;Dimensions.get(&#39;window&#39;).height&lt;/code&gt;，然后设置&lt;code class=&quot;highlighter-rouge&quot;&gt;position: &#39;absolute&#39;, top: 0&lt;/code&gt;，会发现android平台view的底端被遮住了一小部分，这一小部分正好就是android平台statusBar的高度
- 安卓端statusBar通常是25dp，虚拟按键通常是48dp
- 解决方法有四：
  - 设置view的高度是整屏的高度减去statusBar的高度
  - 设置&lt;code class=&quot;highlighter-rouge&quot;&gt;top&lt;/code&gt;值为负的statusBar的高度
  - 设置&lt;code class=&quot;highlighter-rouge&quot;&gt;bottom: -Dimensions.get(&#39;window&#39;).height&lt;/code&gt; 替代&lt;code class=&quot;highlighter-rouge&quot;&gt;top: 0&lt;/code&gt;
  - 在每一个&lt;code class=&quot;highlighter-rouge&quot;&gt;Navigator&lt;/code&gt;的入口设置&lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;StatusBar translucent={true}/&amp;gt;&lt;/code&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;b&gt;大坑:&lt;/b&gt; 有些手机通过上述方法获取到的屏幕高度竟然包含了虚拟按键的高度，如魅族pro4，只能引入&lt;a href=&quot;https://github.com/rebeccahughes/react-native-device-info&quot;&gt;react-native-device-info&lt;/a&gt;这个库来hack一下了&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;3. Android过门动画卡顿&lt;/strong&gt;
- 从测试结果来看是网络请求和过门动作同时进行导致，将网络请求延迟到过门动画结束后即可解决。深层原因？&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;4. Android启动图launcher&lt;/strong&gt;
- 修改MainActivity的父类ReactActivity，在加载RN的view的同时在该view上面覆盖一个原生的view，用来显示启动图，并且设置N秒后隐藏或等待拿到首页数据接口后隐藏&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;5. 支持程度问题&lt;/strong&gt;
- iOS支持7.0及以上
- Android支持API 16+ (Android 4.1) 因为使用了&lt;a href=&quot;http://developer.android.com/reference/android/view/Choreographer.html&quot;&gt;Choreographer&lt;/a&gt;
- 友盟2016-02数据：
  - iOS7.0 以下已不计入主流版本(1%以下)，和其他非主流版本共占4.92%
  - Android4.0 还有2.16%，其他非主流版本共占7.47%&lt;/p&gt;
</description>
        <pubDate>Fri, 06 May 2016 00:00:00 +0800</pubDate>
        <link>http://beefe.github.io//rn/components/2016/05/06/react-native-platform-difference.html</link>
        <guid isPermaLink="true">http://beefe.github.io//rn/components/2016/05/06/react-native-platform-difference.html</guid>
        
        
        <category>RN</category>
        
        <category>components</category>
        
      </item>
    
      <item>
        <title>&lt;标题&gt;</title>
        <description>&lt;p&gt;简介，这会在首页显示&lt;/p&gt;

&lt;!-- more --&gt;

&lt;p&gt;其上的部分会作为摘要显示在首页中，在&lt;code class=&quot;highlighter-rouge&quot;&gt;post&lt;/code&gt;这个layout中，摘要的所有标注和标签都会被 escape 掉。如果想要保留样式或是标签，请先找薛淞之改模版。&lt;/p&gt;

&lt;p&gt;正文（注意上面有两个空格）&lt;/p&gt;

</description>
        <pubDate>Fri, 06 May 2016 00:00:00 +0800</pubDate>
        <link>http://beefe.github.io//2016/05/06/empty.html</link>
        <guid isPermaLink="true">http://beefe.github.io//2016/05/06/empty.html</guid>
        
        
      </item>
    
  </channel>
</rss>
